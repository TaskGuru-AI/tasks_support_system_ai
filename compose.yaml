services:
  backend:
    build: .
    command: poetry run uvicorn tasks_support_system_ai.main:app --host 0.0.0.0 --port 8000
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - LOG_LEVEL=INFO
    env_file:
      - ./.env
    networks:
      - app-network
    profiles:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 2s

  frontend:
    build: .
    command: poetry run streamlit run tasks_support_system_ai/web/app.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "127.0.0.1:8501:8501"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - LOG_LEVEL=INFO
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    profiles:
      - app
    depends_on:
      backend:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    networks:
      - nginx_network
    volumes:
      - /opt/app/volumes/minio:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_SERVER_URL: "https://data.pyrogn.ru"
      MINIO_BROWSER_REDIRECT_URL: "https://data.pyrogn.ru/ui/"
    command: server /data --console-address ":9001"
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/minio.conf:/etc/nginx/conf.d/minio.conf
      # - ./nginx/support.conf:/etc/nginx/conf.d/support.conf
      - ./certs:/etc/letsencrypt:ro
    profiles:
      - production
    networks:
      - nginx_network
      - app-network
    depends_on:
      - certbot

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot; done'
    # initial issuance
    # docker compose run certbot certonly --webroot -w /var/www/certbot -d your.domain --email your-email@example.com --agree-tos --non-interactive
    profiles:
      - production
    networks:
      - nginx_network

volumes:
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/volumes/minio
  logs:

networks:
  app-network:
    driver: bridge
  nginx_network:
    driver: bridge
