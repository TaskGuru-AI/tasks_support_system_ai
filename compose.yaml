services:
  backend:
    build: .
    command: poetry run uvicorn tasks_support_system_ai.main:app --host 0.0.0.0 --port 8000
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - LOG_LEVEL=INFO
    env_file:
      - ./.env
    networks:
      - app-network
    profiles:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 2s

  frontend:
    build: .
    command: poetry run streamlit run tasks_support_system_ai/web/app.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "127.0.0.1:8501:8501"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - LOG_LEVEL=INFO
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    profiles:
      - app
    depends_on:
      backend:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    networks:
      - npm_network
    volumes:
      - /opt/app/volumes/minio:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_SERVER_URL: "https://data.pyrogn.ru"
      MINIO_BROWSER_REDIRECT_URL: "https://data.pyrogn.ru/ui/"
    command: server /data --console-address ":9001"
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - '81:81'
      # do not expose ports directly, only through proxy
      # - '80:80'
      # - '443:443'
    volumes:
      - ./nginx:/data
      - /etc/letsencrypt:/etc/letsencrypt
    profiles:
      - production
    networks:
      - npm_network

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "50000:50000"
      - "8080:8080"
    volumes:
      - ./jenkins_home:/var/jenkins_home
    networks:
      - npm_network

volumes:
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/volumes/minio
  logs:

networks:
  app-network:
    driver: bridge
  npm_network:
    driver: bridge
