name: Deploy

on:
  push:
    branches: [ main, 'test-deploy*' ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2

      - name: Create deployment directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p /opt/app
            rm -rf /opt/app/temp
            mkdir -p /opt/app/temp

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ".,!.git/**,!notebooks/**,!.gitignore,!.env"
          target: "/opt/app/temp"

      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          command_timeout: "20m"
          script: |
            set -e
            cd /opt/app

            mkdir -p data

            # Clean up Docker resources (before new deployment)
            docker system prune -af --filter "until=24h"  # Remove unused objects older than 24h
            docker builder prune -af --filter "until=24h"  # Clean build cache


            # Stop current services
            docker compose down || true

            echo "${{ secrets.ENV_FILE }}" > temp/.env

            # Remove old files except volumes
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S rm -rf $(ls -A | grep -v '^temp$' | grep -v 'volumes')

            # Move new files from temp
            sudo mv temp/* temp/.[!.]* .
            sudo rm -rf temp

            # сначала поднимаем backend, minio
            # скачиваем данные из minio
            # поднимаем фронтенд
            docker compose up backend minio nginx -d --build
            docker compose exec backend poetry run minio-sync pull
            docker compose down backend
            docker compose up backend frontend nginx -d --build

            # Cleanup unused images
            docker image prune -f
